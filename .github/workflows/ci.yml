name: CI/CD Pipeline

on:
    push:
        branches: [main, develop, openwebui]
    pull_request:
        branches: [main, develop]

jobs:
    test:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                python-version: [3.12]

        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              uses: astral-sh/setup-uv@v3
              with:
                  version: "latest"

            - name: Set up Python ${{ matrix.python-version }}
              run: uv python install ${{ matrix.python-version }}

            - name: Install dependencies
              run: uv sync

            - name: Run linting with ruff (if available)
              run: |
                  if uv pip list | grep -q ruff; then
                    uv run ruff check . || true
                  fi
              continue-on-error: true

            - name: Run type checking with mypy (if available)
              run: |
                  if uv pip list | grep -q mypy; then
                    uv run mypy . || true
                  fi
              continue-on-error: true

            - name: Run tests with pytest
              run: uv run pytest test/ -v --tb=short

            - name: Run tests with coverage (if pytest-cov is available)
              run: |
                  if uv pip list | grep -q pytest-cov; then
                    uv run pytest test/ -v --cov=src --cov=api --cov-report=xml --cov-report=html
                  fi
              continue-on-error: true

            - name: Upload coverage reports to Codecov (if coverage was generated)
              uses: codecov/codecov-action@v3
              if: success()
              with:
                  file: ./coverage.xml
                  flags: unittests
                  name: codecov-umbrella
                  fail_ci_if_error: false

    build-docker:
        runs-on: ubuntu-latest
        needs: test
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/openwebui')

        steps:
            - uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build Docker image
              run: |
                  docker build -t multimodal-rag-app:${{ github.sha }} .
                  docker build -t multimodal-rag-app:latest .

            - name: Test Docker image
              run: |
                  docker run --rm multimodal-rag-app:latest python --version

    integration-test:
        runs-on: ubuntu-latest
        needs: test
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'

        services:
            milvus:
                image: milvusdb/milvus:latest
                ports:
                    - 19530:19530
                env:
                    ETCD_ENDPOINTS: localhost:2379
                    MINIO_ADDRESS: localhost:9000
                options: >-
                    --health-cmd="curl -f http://localhost:19530/health || exit 1"
                    --health-interval=30s
                    --health-timeout=10s
                    --health-retries=3

        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              uses: astral-sh/setup-uv@v3
              with:
                  version: "latest"

            - name: Set up Python 3.12
              run: uv python install 3.12

            - name: Install dependencies
              run: uv sync

            - name: Wait for Milvus to be ready
              run: |
                  timeout 60 bash -c 'until curl -f http://localhost:19530/health; do sleep 2; done'

            - name: Run integration tests
              run: |
                  # Run any integration tests that require external services
                  uv run pytest test/ -v -m integration || echo "No integration tests found"
              env:
                  MILVUS_HOST: localhost
                  MILVUS_PORT: 19530

    security-scan:
        runs-on: ubuntu-latest
        needs: test

        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              uses: astral-sh/setup-uv@v3
              with:
                  version: "latest"

            - name: Set up Python 3.12
              run: uv python install 3.12

            - name: Install dependencies
              run: uv sync

            - name: Run security scan with bandit (if available)
              run: |
                  uv add bandit[toml] --dev || true
                  if uv pip list | grep -q bandit; then
                    uv run bandit -r src/ api/ -f json -o bandit-report.json || true
                  fi
              continue-on-error: true

            - name: Run dependency vulnerability scan with safety (if available)
              run: |
                  uv add safety --dev || true
                  if uv pip list | grep -q safety; then
                    uv run safety check || true
                  fi
              continue-on-error: true
