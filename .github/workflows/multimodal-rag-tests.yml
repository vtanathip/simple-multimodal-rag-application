name: Multimodal RAG Tests

on:
    push:
        branches: [main, develop, openwebui]
    pull_request:
        branches: [main, develop]
    schedule:
        # Run tests daily at 2 AM UTC to catch dependency issues
        - cron: "0 2 * * *"

env:
    PYTHON_VERSION: "3.12"

jobs:
    unit-tests:
        runs-on: ubuntu-latest
        timeout-minutes: 30

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Install uv
              uses: astral-sh/setup-uv@v3
              with:
                  version: "latest"

            - name: Set up Python ${{ env.PYTHON_VERSION }}
              run: uv python install ${{ env.PYTHON_VERSION }}

            - name: Create virtual environment and install dependencies
              run: |
                  uv sync

            - name: Verify installation
              run: |
                  uv run python --version
                  uv pip list

            - name: Run API tests
              run: |
                  uv run pytest test/test_api.py -v --tb=short

            - name: Run MilvusManager tests
              run: |
                  uv run pytest test/test_milvus_manager.py -v --tb=short

            - name: Run Processor tests
              run: |
                  uv run pytest test/test_processor.py -v --tb=short

            - name: Run Processor with Database tests
              run: |
                  uv run pytest test/test_processor_with_database.py -v --tb=short

            - name: Run Multimodal RAG Agent tests
              run: |
                  uv run pytest test/test_multimodal_rag_agent.py -v --tb=short

            - name: Run all tests with coverage
              run: |
                  uv add pytest-cov --dev
                  uv run pytest test/ -v --cov=src --cov=api --cov-report=term-missing --cov-report=xml

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v4
              if: success()
              with:
                  file: ./coverage.xml
                  fail_ci_if_error: false

    test-matrix:
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]
                python-version: ["3.12"]

        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              uses: astral-sh/setup-uv@v3
              with:
                  version: "latest"

            - name: Set up Python ${{ matrix.python-version }}
              run: uv python install ${{ matrix.python-version }}

            - name: Install dependencies
              run: uv sync

            - name: Run core tests (cross-platform)
              run: |
                  uv run pytest test/test_api.py test/test_processor.py -v

    docker-test:
        runs-on: ubuntu-latest
        needs: unit-tests
        if: github.event_name == 'push'

        steps:
            - uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build Docker image
              run: |
                  docker build -t multimodal-rag-test:latest .

            - name: Test Docker image can start
              run: |
                  docker run --rm -d --name test-container -p 8000:8000 multimodal-rag-test:latest
                  sleep 10
                  docker logs test-container
                  docker stop test-container || true

    lint-and-format:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              uses: astral-sh/setup-uv@v3
              with:
                  version: "latest"

            - name: Set up Python ${{ env.PYTHON_VERSION }}
              run: uv python install ${{ env.PYTHON_VERSION }}

            - name: Install dev dependencies
              run: |
                  uv sync
                  uv add ruff black isort --dev

            - name: Run ruff linting
              run: |
                  uv run ruff check . --output-format=github
              continue-on-error: true

            - name: Check code formatting with black
              run: |
                  uv run black --check --diff .
              continue-on-error: true

            - name: Check import sorting with isort
              run: |
                  uv run isort --check-only --diff .
              continue-on-error: true
